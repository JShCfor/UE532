// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DepthOnlyPixelShader.hlsl: Depth-only pixel shader.
=============================================================================*/

#include "Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

//add das
uint DasStencil;
uint DasCustom;

float4 IntValue2Color(int nValue)
{
	int nRed = nValue % 256;
	float fRed = nRed / 255.0;

	nValue = nValue / 256;
	int nGreen = nValue % 256;
	float fGreen = nGreen / 255.0;

	nValue = nValue / 256;
	int nBlue = nValue % 256;
	float fBlue = nBlue / 255.0;

	nValue = nValue / 256;
	int nAlpha = nValue % 256;
	float fAlpha = nAlpha / 255.0;

	return float4(fRed, fGreen, fBlue, fAlpha);
}

void Main(
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position,
	in float DasSelect : TEXCOORD4,//add Das 3Dtiles的i3dm的状态信息
	in float DasBatchID : TEXCOORD5,//add Das 3Dtiles的Batch信息
#endif

#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants
	, float4 PixelPosition : TEXCOORD6 //-- Not used currently
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	, float3 PixelPositionExcludingWPO : TEXCOORD7
#endif
	OPTIONAL_IsFrontFace
	OPTIONAL_OutDepthConservative,
#endif
	out float4 OutDasDepth : SV_Target0,
	out float4 OutDasStencil : SV_Target1,
	out float4 OutDasCustom : SV_Target2,
	out float4 OutDasCustomDepthOn : SV_Target3
#if MATERIALBLENDING_MASKED_USING_COVERAGE
	, out uint OutCoverage : SV_Coverage
#endif
	)
{
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	#if INSTANCED_STEREO
		ResolvedView = ResolveView(FactoryInterpolants.EyeIndex);
	#else
		ResolvedView = ResolveView();
	#endif

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, PixelPositionExcludingWPO);	
	#else
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, bIsFrontFace);
	#endif

	#if OUTPUT_PIXEL_DEPTH_OFFSET
		#if ALLOW_DEBUG_VIEW_MODES
		OutDepth = SvPosition.z;
		if (!ResolvedView.DebugViewModeMask)
		#endif
		{
			ApplyPixelDepthOffsetToMaterialParameters(MaterialParameters, PixelMaterialInputs, OutDepth);
		}
	#endif





	#if STRATA_ENABLED
		FStrataAddressing NullStrataAddressing = (FStrataAddressing)0;	// Fake unused in StrataCreateBSDFContext when using Forward inline shading

		FStrataData StrataData = PixelMaterialInputs.GetFrontStrataData();
		FStrataPixelHeader StrataPixelHeader = MaterialParameters.GetFrontStrataHeader();

		float MaterialOpacity = 1.0f;
		if (StrataPixelHeader.BSDFCount > 0)
		{
			// Update tree (coverage/transmittance/luminace weights)
			const FStrataIntegrationSettings Settings = InitStrataIntegrationSettings();
			const float3 V = MaterialParameters.CameraVector;
			StrataPixelHeader.StrataUpdateTree(NullStrataAddressing, V, Settings);

			MaterialOpacity = StrataPixelHeader.StrataTree.Operators[StrataData.OperatorIndex].Coverage;
		}

	#if STRATA_USE_PREMULTALPHA_OVERRIDE // AlphaComposite - Premultiplied alpha blending
		MaterialOpacity = GetMaterialOpacity(PixelMaterialInputs); 
	#endif

	#else // STRATA_ENABLED

		float MaterialOpacity = GetMaterialOpacity(PixelMaterialInputs);

	#endif // STRATA_ENABLED
		

	#if MATERIALBLENDING_TRANSLUCENT
		//add Das 透明材质点选不受透明度限制
		if(DasStencil == 0)
			clip(GetMaterialOpacity(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue());
	#elif MATERIALBLENDING_MASKED_USING_COVERAGE
		OutCoverage = DiscardMaterialWithPixelCoverage(MaterialParameters, PixelMaterialInputs);
	#else
		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);
	#endif
#endif
	
	OutDasDepth = 0;
	OutDasStencil = 0;
	OutDasCustom = 0;
	OutDasCustomDepthOn = 0;

#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	OutDasDepth = IntValue2Color(SvPosition.w);
#endif
	//DasCustom开启时一定能描边高亮、DepthRendering的优化。clip(-1)会导致场景深度图异常
	if (DasStencil == 0 && DasCustom == 0)
	{
		//部分场景对象的stencil管理异常
		OutDasCustom = 0;
		OutDasCustomDepthOn = 0;
		return;
	}
	
	int nBatchID = 0;
	int nDasSelect = 0;
	float fCustom0 = 0;
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	//深度信息
	nBatchID = floor(DasBatchID) + (frac(DasBatchID) > 0.5 ? 1 : 0);
	nDasSelect = floor(DasSelect) + (frac(DasSelect) > 0.5 ? 1 : 0);
	fCustom0 = ceil(GetMaterialCustomData0(MaterialParameters));//3Dtiles b3dm的state信息
#endif
	
	//蒙版信息
	OutDasStencil = IntValue2Color(nBatchID + DasStencil);
	
	//输出状态信息
	float f3DTileSelectValue = ceil(fCustom0) + nDasSelect;

	if((DasCustom & 1) && f3DTileSelectValue == 0 && nBatchID != 0)
	{
		//3Dtiles描边时选中的非Batch部分,不输出保持描边图完整，防止图挖洞
		clip(-1);
	}

	if(nBatchID == 0)
	{
		OutDasCustom = IntValue2Color(DasCustom);
		OutDasCustomDepthOn = IntValue2Color(DasCustom);
	}
	else
	{
		OutDasCustom = IntValue2Color(f3DTileSelectValue);
		OutDasCustomDepthOn = IntValue2Color(f3DTileSelectValue);
	}
}
